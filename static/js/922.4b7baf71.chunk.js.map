{"version":3,"file":"static/js/922.4b7baf71.chunk.js","mappings":"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","sources":["components/ContactItem/ContactItem.js","redux/selectors.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","Pages/Contacts.js"],"sourcesContent":["\n// import { ListItem, BtnTrash } from './ContactItem.styled';\nimport {\n    Tag,\n\n} from '@chakra-ui/react';\nimport { Button,  } from '@chakra-ui/react'\n\nimport { HiTrash } from 'react-icons/hi';\nimport { useDispatch } from 'react-redux';\n\nimport { deleteContact } from 'redux/operations';\n\nexport const ContactItem = (({ contact: { id, name, number }}) => {\n    const dispatch = useDispatch();\n    return (\n            <Tag>\n                <span>{name}</span>\n                <span>{number}</span>\n                <Button type=\"button\" onClick={() => dispatch(deleteContact(id))}><HiTrash/></Button>\n            </Tag>\n        )\n})\n\n\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectIsLoading  = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilteredContacts = createSelector(\n   [selectContacts, selectFilter],\n    (contacts, filter) => {\n     \n     return contacts.filter(item =>\n      item.name.toLowerCase().trim().includes(filter.toLowerCase().trim())\n    );\n      \n  }\n);\n","import { useSelector } from 'react-redux';\nimport { ContactItem } from 'components/ContactItem/ContactItem';\n// import { List } from './ContactList.styled';\nimport { selectFilteredContacts } from 'redux/selectors';\nimport {\n  ListItem,\n  UnorderedList,\n} from '@chakra-ui/react'\n\nexport const ContactList = (() => {\n  \n   \n    const contacts = useSelector(selectFilteredContacts);\n\n    return (\n            <UnorderedList>\n                <ListItem>\n                    {contacts.map(item => (<li key={item.id}> <ContactItem\n                        contact = {item} />\n                    </li>) \n                )}\n                </ListItem>\n            </UnorderedList>\n        )\n})\n\n","// import { Formik } from 'formik';\nimport { useFormik } from \"formik\";\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  Input,\n  VStack,\n  theme\n} from \"@chakra-ui/react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\nimport { addContact } from 'redux/operations';\n\nimport * as Yup from 'yup';\nimport \"yup-phone\"; \n// import { ErrMessage, StyledForm, StyledField, Label, BtnAdd } from './ContactForm.styled';\n\nconst quizSchema = Yup.object().shape({\n  name: Yup.string().min(3, 'Too short!').required('This field is required!'),\n    number: Yup.string().matches(/^\\d{3}-\\d{3}-\\d{4}$/, 'Must be in format: 000-000-0000').required('This field is required!')\n  \n});\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleFormSubmit = ({ name, number }, { resetForm } ) => {\n  const hasContact = contacts.some(contact => contact.name.toLowerCase().includes(name.toLowerCase()))\n    \n    if (hasContact) {\n      resetForm();\n      return alert(\n        `WARNING! ${name} is already in contacts`) \n    }\n    dispatch(addContact({ name, number }));\n    \n  resetForm();\n  }\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      number: \"\",\n      \n    },\n    validationSchema:{ quizSchema },\n    onSubmit: (values) => {\n      alert(JSON.stringify(values, null, 2));\n    },\n    \n  });\n  return (\n    <Flex bg=\"gray.100\" align=\"center\" justify=\"center\" h=\"100vh\">\n      <Box bg=\"white\" p={6} rounded=\"md\">\n        <form onSubmit={handleFormSubmit}>\n          <VStack spacing={4} align=\"flex-start\">\n            <FormControl>\n              <FormLabel htmlFor=\"name\">Name</FormLabel>\n              <Input\n                id=\"name\"\n                name=\"name\"\n                type=\"name\"\n                variant=\"filled\"\n                // onChange={formik.handleChange}\n                value={formik.values.name}\n              />\n            </FormControl>\n            <FormControl>\n              <FormLabel htmlFor=\"number\">Tel. Number </FormLabel>\n              <Input\n                id=\"number\"\n                name=\"number\"\n                type=\"number\"\n                variant=\"filled\"\n                // onChange={formik.handleChange}\n                value={formik.values.email}\n              />\n            </FormControl>\n           \n            <Button type=\"submit\" colorScheme={theme.colors.add} width=\"full\">\n              Add Contact\n            </Button>\n          </VStack>\n        </form>\n      </Box>\n    </Flex>\n  );\n}\n  \n  //   return (\n  //     <Formik\n  //       initialValues={{\n  //         name: '',\n  //         number: '',\n  //       }}\n  //       onSubmit={handleFormSubmit}\n  //       validationSchema={quizSchema}\n  //       >\n  //       <StyledForm>\n        \n  //         <Label>\n  //           Name\n  //           <StyledField type=\"text\" name=\"name\" placeholder=\" \" />\n  //           <ErrMessage name=\"name\" component=\"div\" />\n  //         </Label>\n\n  //         <Label>\n  //           Number (000-000-0000)\n  //           <StyledField type=\"text\" name=\"number\" />\n  //           <ErrMessage name=\"number\" component=\"div\" />\n  //         </Label>\n\n  //         <BtnAdd type=\"submit\">Add contact</BtnAdd>\n  //       </StyledForm>\n  //     </Formik>\n  //   );\n  // };\n\n\nexport default ContactForm;","// import { FilterInput } from './Filter.styled';\nimport { Input } from '@chakra-ui/react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filterSlice';\nimport { selectFilter } from 'redux/selectors';\n\nexport const Filter = () => {\n\n  const dispatch = useDispatch();\n  const filterName = useSelector(selectFilter).name;\n\n  return (\n    <div>\n      <h3>Find contact by name</h3>\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        value={filterName}\n        onChange={({ currentTarget: { value } }) =>\n          dispatch(setFilter(value))\n        }\n        placeholder=\"Filter by name...\"\n      />\n    </div>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { fetchContacts } from 'redux/operations';\nimport { selectIsLoading } from 'redux/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactForm />\n      <Filter/>\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactList/>\n    </>\n  );\n}\n"],"names":["ContactItem","_ref","_ref$contact","contact","id","name","number","dispatch","useDispatch","_jsxs","Tag","children","_jsx","Button","type","onClick","deleteContact","HiTrash","selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","selectFilteredContacts","createSelector","item","toLowerCase","trim","includes","ContactList","useSelector","UnorderedList","ListItem","map","quizSchema","Yup","shape","min","required","matches","formik","useFormik","initialValues","validationSchema","onSubmit","values","alert","JSON","stringify","Flex","bg","align","justify","h","Box","p","rounded","_ref2","resetForm","some","concat","addContact","VStack","spacing","FormControl","FormLabel","htmlFor","Input","variant","value","email","colorScheme","theme","width","Filter","filterName","onChange","currentTarget","setFilter","placeholder","Contacts","useEffect","fetchContacts","_Fragment","Helmet","ContactForm"],"sourceRoot":""}