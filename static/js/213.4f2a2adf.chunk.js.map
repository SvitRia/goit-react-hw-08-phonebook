{"version":3,"file":"static/js/213.4f2a2adf.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/form-control/src/form-error.tsx","components/RegisterForm/RegistForm.js","Pages/Register.js"],"sourcesContent":["import { type IconProps, Icon } from \"@chakra-ui/icon\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext } from \"./form-control\"\n\nconst [FormErrorStylesProvider, useFormErrorStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormErrorStylesContext`,\n  errorMessage: `useFormErrorStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormError />\" `,\n})\n\nexport { useFormErrorStyles }\nexport interface FormErrorMessageProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormErrorMessage\"> {}\n\n/**\n * Used to provide feedback about an invalid input,\n * and suggest clear instructions on how to fix it.\n */\nexport const FormErrorMessage = forwardRef<FormErrorMessageProps, \"div\">(\n  (props, ref) => {\n    const styles = useMultiStyleConfig(\"FormError\", props)\n    const ownProps = omitThemingProps(props)\n    const field = useFormControlContext()\n\n    if (!field?.isInvalid) return null\n\n    return (\n      <FormErrorStylesProvider value={styles}>\n        <chakra.div\n          {...field?.getErrorMessageProps(ownProps, ref)}\n          className={cx(\"chakra-form__error-message\", props.className)}\n          __css={{\n            display: \"flex\",\n            alignItems: \"center\",\n            ...styles.text,\n          }}\n        />\n      </FormErrorStylesProvider>\n    )\n  },\n)\n\nFormErrorMessage.displayName = \"FormErrorMessage\"\n\n/**\n * Used as the visual indicator that a field is invalid or\n * a field has incorrect values.\n */\nexport const FormErrorIcon = forwardRef<IconProps, \"svg\">((props, ref) => {\n  const styles = useFormErrorStyles()\n  const field = useFormControlContext()\n\n  if (!field?.isInvalid) return null\n\n  const _className = cx(\"chakra-form__error-icon\", props.className)\n\n  return (\n    <Icon\n      ref={ref}\n      aria-hidden\n      {...props}\n      __css={styles.icon}\n      className={_className}\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z\"\n      />\n    </Icon>\n  )\n})\n\nFormErrorIcon.displayName = \"FormErrorIcon\"\n","import { useDispatch } from 'react-redux';\nimport { register } from 'redux/Auth/Operations';\n// import css from './RegisterForm.module.css';\nimport { Formik, Field } from \"formik\";\nimport {\n  Box,\n  Button,\n  Checkbox,\n  Flex,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  VStack\n} from \"@chakra-ui/react\";\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const handleRegistreSubmit = ({ name, email, password }, { resetForm }) => {\n    // e.preventDefault();\n    // const form = e.currentTarget;\n    dispatch(\n      register({\n        name,\n        email,\n        password\n      })\n    );\n    resetForm();\n  };\n\n  return (\n    <Flex bg=\"bisque_lite\" align=\"center\" justify=\"center\" h=\"100vh\">\n       <Box bg=\"white\" w=\"40vw\" p={6} rounded=\"md\" >\n        <Formik\n          initialValues={{\n            name: \"\",\n            email: \"\",\n            password: \"\",\n            rememberMe: false\n          }}\n          onSubmit={handleRegistreSubmit}\n          // onSubmit={(values) => {\n          //   console.log(values)\n          //   alert(JSON.stringify(values, null, 2));\n          // }}\n        >\n          {( { handleSubmit ,errors, touched }) => (\n            <form onSubmit={handleSubmit}>\n              <VStack spacing={4} align=\"flex-start\">\n                 <FormControl>\n                  <FormLabel htmlFor=\"name\">Name</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"name\"\n                    name=\"name\"\n                    type=\"name\"\n                    variant=\"filled\"\n                  />\n                </FormControl>\n                <FormControl>\n                  <FormLabel htmlFor=\"email\">Email Address</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"email\"\n                    name=\"email\"\n                    type=\"email\"\n                    variant=\"filled\"\n                  />\n                </FormControl>\n                <FormControl isInvalid={!!errors.password && touched.password}>\n                  <FormLabel htmlFor=\"password\">Password</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"password\"\n                    name=\"password\"\n                    type=\"password\"\n                    variant=\"filled\"\n                    validate={(value) => {\n                      let error;\n\n                      if (value.length < 6) {\n                        error = \"Password must contain at least 6 characters\";\n                      }\n\n                      return error;\n                    }}\n                  />\n                  <FormErrorMessage>{errors.password}</FormErrorMessage>\n                </FormControl>\n                <Field\n                  as={Checkbox}\n                  id=\"rememberMe\"\n                  name=\"rememberMe\"\n                  colorScheme=\"purple\"\n                >\n                  Remember me?\n                </Field>\n                <Button type=\"submit\" colorScheme=\"purple\" width=\"full\">\n                 Register me\n                </Button>\n              </VStack>\n            </form>\n          )}\n        </Formik>\n      </Box>\n    </Flex>\n  );\n}\n\n//   return (\n//     <form  onSubmit={handleSubmit} autoComplete=\"on\">\n//       <label >\n//         Username\n//         <input type=\"text\" name=\"name\" />\n//       </label>\n//       <label >\n//         Email\n//         <input type=\"email\" name=\"email\" />\n//       </label>\n//       <label >\n//         Password\n//         <input type=\"password\" name=\"password\" />\n//       </label>\n//       <button type=\"submit\">Register</button>\n//     </form>\n//   );\n// };\n\n\n\n\n  ","import { Helmet } from 'react-helmet';\nimport { RegisterForm } from 'components/RegisterForm/RegistForm';\n\nexport default function Register() {\n  return (\n    <div>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegisterForm />\n    </div>\n  );\n}"],"names":["_createContext","createContext","name","errorMessage","_createContext2","_slicedToArray","FormErrorStylesProvider","useFormErrorStyles","FormErrorMessage","forwardRef","props","ref","styles","useMultiStyleConfig","ownProps","omitThemingProps","field","useFormControlContext","isInvalid","jsx","value","children","chakra","_objectSpread","getErrorMessageProps","className","cx","__css","display","alignItems","text","displayName","_className","Icon","icon","fill","d","RegisterForm","dispatch","useDispatch","_jsx","Flex","bg","align","justify","h","Box","w","p","rounded","Formik","initialValues","email","password","rememberMe","onSubmit","_ref","_ref2","resetForm","register","_ref3","handleSubmit","errors","touched","_jsxs","VStack","spacing","FormControl","FormLabel","htmlFor","Field","as","Input","id","type","variant","validate","error","length","Checkbox","colorScheme","Button","width","Register","Helmet"],"sourceRoot":""}