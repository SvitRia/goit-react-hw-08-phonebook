{"version":3,"file":"static/js/922.78601485.chunk.js","mappings":"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","sources":["components/ContactItem/ContactItem.js","redux/selectors.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","Pages/Contacts.js"],"sourcesContent":["import {\n    Box\n\n} from '@chakra-ui/react';\nimport { Button,  } from '@chakra-ui/react'\n\nimport { HiTrash } from 'react-icons/hi';\nimport { useDispatch } from 'react-redux';\n\nimport { deleteContact } from 'redux/operations';\n\nexport const ContactItem = (({ contact: { id, name, number }}) => {\n    const dispatch = useDispatch();\n    return (\n            <Box w='100%' p={4}>\n                <span>{name}</span>\n                <span>{number}</span>\n                <Button type=\"button\" onClick={() => dispatch(deleteContact(id))}><HiTrash/></Button>\n            </Box>\n        )\n})\n\n\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectIsLoading  = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilteredContacts = createSelector(\n   [selectContacts, selectFilter],\n    (contacts, filter) => {\n     \n     return contacts.filter(item =>\n      item.name.toLowerCase().trim().includes(filter.toLowerCase().trim())\n    );\n      \n  }\n);\n","import { useSelector } from 'react-redux';\nimport { ContactItem } from 'components/ContactItem/ContactItem';\nimport { selectFilteredContacts } from 'redux/selectors';\nimport {\n  ListItem,\n  UnorderedList,\n} from '@chakra-ui/react'\n\nexport const ContactList = (() => {\n  \n   \n    const contacts = useSelector(selectFilteredContacts);\n\n    return (\n            <UnorderedList>\n                <ListItem>\n                    {contacts.map(item => (<li key={item.id}> <ContactItem\n                        contact = {item} />\n                    </li>) \n                )}\n                </ListItem>\n            </UnorderedList>\n        )\n})\n\n"," import { useFormik } from \"formik\";\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  Input,\n  VStack\n} from \"@chakra-ui/react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\nimport { addContact } from 'redux/operations';\n\n// import * as Yup from 'yup';\n// import \"yup-phone\";\n// import { ErrMessage, StyledForm, StyledField, Label, BtnAdd } from './ContactForm.styled';\n\n// const quizSchema = Yup.object().shape({\n//   name: Yup.string().min(3, 'Too short!').required('This field is required!'),\n//     number: Yup.string().matches(/^\\d{2}-\\d{2}-\\d{3}$/, 'Must be in format: 000-000-0000').required('This field is required!')\n\n// });\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  console.log(contacts);\n  const handleFormSubmit = ({ name, number }, { resetForm }) => {\n    const hasContact = contacts.some(contact =>\n      contact.name.toLowerCase().includes(name.toLowerCase())\n    );\n\n    if (hasContact) {\n      resetForm();\n      return alert(`WARNING! ${name} is already in contacts`);\n    }\n    dispatch(addContact({ name: number }));\n   \n    resetForm();\n  };\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      number: \"\",\n      },\n    // validationSchema: { quizSchema },\n    onSubmit:(values)=> {handleFormSubmit(values.name ,values.number)},\n    // onSubmit: (values) => {\n    //   alert(JSON.stringify(values, null, 2));\n    // },\n\n  });\n  return (\n    <Flex bg=\"bisque_middle\" align=\"center\" justify=\"center\" h=\"100vh\">\n      <Box bg=\"white\" w=\"40vw\" p={6} rounded=\"md\">\n          <form onSubmit={formik.handleSubmit}>\n            <VStack spacing={4} align=\"flex-start\">\n              <FormControl>\n                <FormLabel htmlFor=\"name\">Name</FormLabel>\n                <Input \n                  id=\"name\"\n                  name=\"name\"\n                  type=\"text\"\n                  variant=\"filled\"\n                  onChange={formik.handleChange}\n                  value={formik.values.name}\n                />\n              </FormControl>\n              <FormControl>\n                <FormLabel htmlFor=\"number\">Number (000-000-0000)</FormLabel>\n                <Input \n                  id=\"number\"\n                  name=\"number\"\n                  type=\"text\"\n                  variant=\"filled\"\n                  placeholder=\"Phone number\"\n                  pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\"\n                  onChange={formik.handleChange}\n                  value={formik.values.number}\n                />\n              </FormControl>\n\n              <Button  type=\"submit\" bg=\"add\" color=\"white\" width=\"full\">\n                Add Contact\n              </Button>\n            </VStack>\n          </form>\n        \n      </Box>\n    </Flex>\n  );\n};\n\n\nexport default ContactForm;\n","import { Input } from '@chakra-ui/react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filterSlice';\nimport { selectFilter } from 'redux/selectors';\n\nexport const Filter = () => {\n\n  const dispatch = useDispatch();\n  const filterName = useSelector(selectFilter).name;\n\n  return (\n    <div>\n      <h2><b>Find contact by name</b></h2>\n      <Input bg=\"bisque_lite\"\n        type=\"text\"\n        name=\"filter\"\n        value={filterName}\n        onChange={({ currentTarget: { value } }) =>\n          dispatch(setFilter(value))\n        }\n        placeholder=\"Filter by name...\"\n      />\n    </div>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { fetchContacts } from 'redux/operations';\nimport { selectIsLoading } from 'redux/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactForm />\n      <Filter/>\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactList/>\n    </>\n  );\n}\n"],"names":["ContactItem","_ref","_ref$contact","contact","id","name","number","dispatch","useDispatch","_jsxs","Box","w","p","children","_jsx","Button","type","onClick","deleteContact","HiTrash","selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","selectFilteredContacts","createSelector","item","toLowerCase","trim","includes","ContactList","useSelector","UnorderedList","ListItem","map","console","log","formik","useFormik","initialValues","onSubmit","values","_ref2","resetForm","some","alert","concat","addContact","handleFormSubmit","Flex","bg","align","justify","h","rounded","handleSubmit","VStack","spacing","FormControl","FormLabel","htmlFor","Input","variant","onChange","handleChange","value","placeholder","pattern","color","width","Filter","filterName","currentTarget","setFilter","Contacts","useEffect","fetchContacts","_Fragment","Helmet","ContactForm"],"sourceRoot":""}